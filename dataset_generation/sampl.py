import numpy as np
import matplotlib.pyplot as plt

# Original data
num = 1000
# xs = np.linspace(0, 1000, num)
# f = np.array(2 * np.sqrt(xs), dtype=np.uint8)
# d = np.array(10 + 0.0002 * np.array([x**2 for x in xs]), dtype=np.uint8)

d = np.array([116,115,114,114,114,113,112,112,110,108,107,106,105,104,103,100,98,97,95,93,91,87,83,83,80,73,60,46,36,31,26,22,24,31,49,57,46,30,33,40,48,35,25,22,23,23,25,26,24,25,26,27,27,28,29,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,55,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,92,93,94,95,96,97,97,98,99,100,101,102,103,103,104,105,106,107,107,108,109,110,111,112,113,113,114,115,116,116,117,118,119,120,120,121,122,123,123,124,125,126,126,127,128,128,129,130,130,131,131,132,133,134,134,135,135,136,136,137,138,138,138,138,139,140,140,144,204,235,240,239,239,228,167,162,162,162,162,162,163,163,167,171,172,172,172,173,173,173,173,174,174,174,175,176,176,177,177,178,179,179,179,180,181,181,182,183,184,186,187,188,189,190,191,191,192,193,194,194,195,195,196,196,196,197,197,197,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,199,199,199,200,200,200,201,201,202,202,203,203,204,204,204,205,205,206,206,207,207,208,208,209,210,210,211,211,212,212,213,213,214,214,216,217,218,218,219,219,219,219,219,219,219,218,218,218,219,219,220,220,220,221,221,221,222,222,222,223,223,223,223,223,223])

f = np.array([39,41,42,44,45,46,48,49,51,52,53,55,56,57,59,60,61,62,63,65,66,67,68,69,70,71,72,74,75,76,77,78,79,80,81,82,83,83,84,85,86,87,88,89,90,91,91,92,93,94,95,95,96,97,98,99,99,100,101,102,102,103,104,104,105,106,106,107,108,108,109,110,110,111,112,112,113,113,114,115,115,116,116,117,117,118,119,119,120,120,121,121,122,122,123,123,124,124,125,125,126,126,127,127,128,128,129,129,129,130,130,131,131,132,132,132,133,133,134,134,134,135,135,136,136,136,137,137,138,138,138,139,139,139,140,140,140,141,141,142,142,142,143,143,143,144,144,144,144,145,145,145,146,146,146,147,147,147,148,148,148,148,149,149,149,149,150,150,150,151,151,151,151,152,152,152,152,153,153,153,153,154,154,154,154,155,155,155,155,156,156,156,156,156,157,157,157,157,158,158,158,158,158,159,159,159,159,159,160,160,160,160,160,161,161,161,161,161,162,162,162,162,162,162,163,163,163,163,163,163,164,164,164,164,164,164,165,165,165,165,165,165,166,166,166,166,166,166,166,167,167,167,167,167,167,167,168,168,168,168,168,168,168,169,169,169,169,169,169,169,169,170,170,170,170,170,170,170,170,171,171,171,171,171,171,171,171,171,172,172,172,172,172,172,172,172,172,172,173,173,173,173,173,173,173,173,173,173,174,174,174,174,174,174,174,174,174,174,174,175,175,175,175,175,175,175,175,175,175,175])



# Scale d to be saturated between f and d_max
def scale_d(d, f):
    d_max = np.max(d)
    # Ensure all values of d are above f
    scaled_d = np.copy(d).astype(float)  # Use float for scaling calculations
    min_f_d = np.maximum(f, np.min(d))
    
    # Rescale the values while keeping d_max the same
    scaled_d = (scaled_d - np.min(d)) / (d_max - np.min(d)) * (d_max - min_f_d) + min_f_d
    scaled_d = np.clip(scaled_d, 0, 255)  # Ensure values stay in [0, 255]
    return scaled_d.astype(np.uint8)


if __name__ == '__main__':
    # Apply scaling
    scaled_d = scale_d(d, f)

    xs = range(len(f))
    # Plot results
    plt.plot(xs, f, color='blue', label='f (original)')
    plt.plot(xs, d, color='red', label='d (original)')
    plt.plot(xs, scaled_d, color='green', label='scaled_d (transformed)')
    plt.legend()
    plt.show()
